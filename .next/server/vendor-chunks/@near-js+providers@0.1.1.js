"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@near-js+providers@0.1.1";
exports.ids = ["vendor-chunks/@near-js+providers@0.1.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/exponential-backoff.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/exponential-backoff.js ***!
  \****************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.exponentialBackoff = void 0;\nfunction exponentialBackoff(startWaitTime, retryNumber, waitBackoff, getResult) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // TODO: jitter?\n        let waitTime = startWaitTime;\n        for (let i = 0; i < retryNumber; i++) {\n            const result = yield getResult();\n            if (result) {\n                return result;\n            }\n            yield sleep(waitTime);\n            waitTime *= waitBackoff;\n        }\n        return null;\n    });\n}\nexports.exponentialBackoff = exponentialBackoff;\n// Sleep given number of millis.\nfunction sleep(millis) {\n    return new Promise(resolve => setTimeout(resolve, millis));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDAuMS4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2V4cG9uZW50aWFsLWJhY2tvZmYuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDAuMS4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2V4cG9uZW50aWFsLWJhY2tvZmYuanM/MmE5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leHBvbmVudGlhbEJhY2tvZmYgPSB2b2lkIDA7XG5mdW5jdGlvbiBleHBvbmVudGlhbEJhY2tvZmYoc3RhcnRXYWl0VGltZSwgcmV0cnlOdW1iZXIsIHdhaXRCYWNrb2ZmLCBnZXRSZXN1bHQpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAvLyBUT0RPOiBqaXR0ZXI/XG4gICAgICAgIGxldCB3YWl0VGltZSA9IHN0YXJ0V2FpdFRpbWU7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmV0cnlOdW1iZXI7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgZ2V0UmVzdWx0KCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlpZWxkIHNsZWVwKHdhaXRUaW1lKTtcbiAgICAgICAgICAgIHdhaXRUaW1lICo9IHdhaXRCYWNrb2ZmO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0pO1xufVxuZXhwb3J0cy5leHBvbmVudGlhbEJhY2tvZmYgPSBleHBvbmVudGlhbEJhY2tvZmY7XG4vLyBTbGVlcCBnaXZlbiBudW1iZXIgb2YgbWlsbGlzLlxuZnVuY3Rpb24gc2xlZXAobWlsbGlzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtaWxsaXMpKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/exponential-backoff.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/fetch.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/fetch.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst node_fetch_1 = __importDefault(__webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/.pnpm/node-fetch@2.6.7/node_modules/node-fetch/lib/index.mjs\"));\nconst http_1 = __importDefault(__webpack_require__(/*! http */ \"http\"));\nconst https_1 = __importDefault(__webpack_require__(/*! https */ \"https\"));\nconst httpAgent = new http_1.default.Agent({ keepAlive: true });\nconst httpsAgent = new https_1.default.Agent({ keepAlive: true });\nfunction agent(_parsedURL) {\n    if (_parsedURL.protocol === 'http:') {\n        return httpAgent;\n    }\n    else {\n        return httpsAgent;\n    }\n}\nfunction default_1(resource, init) {\n    return (0, node_fetch_1.default)(resource, Object.assign({ agent: agent(new URL(resource.toString())) }, init));\n}\nexports[\"default\"] = default_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDAuMS4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2ZldGNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUNBQXFDLG1CQUFPLENBQUMscUdBQVk7QUFDekQsK0JBQStCLG1CQUFPLENBQUMsa0JBQU07QUFDN0MsZ0NBQWdDLG1CQUFPLENBQUMsb0JBQU87QUFDL0MsNkNBQTZDLGlCQUFpQjtBQUM5RCwrQ0FBK0MsaUJBQWlCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCw0Q0FBNEM7QUFDM0c7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDAuMS4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2ZldGNoLmpzP2E5OTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBub2RlX2ZldGNoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm5vZGUtZmV0Y2hcIikpO1xuY29uc3QgaHR0cF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJodHRwXCIpKTtcbmNvbnN0IGh0dHBzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImh0dHBzXCIpKTtcbmNvbnN0IGh0dHBBZ2VudCA9IG5ldyBodHRwXzEuZGVmYXVsdC5BZ2VudCh7IGtlZXBBbGl2ZTogdHJ1ZSB9KTtcbmNvbnN0IGh0dHBzQWdlbnQgPSBuZXcgaHR0cHNfMS5kZWZhdWx0LkFnZW50KHsga2VlcEFsaXZlOiB0cnVlIH0pO1xuZnVuY3Rpb24gYWdlbnQoX3BhcnNlZFVSTCkge1xuICAgIGlmIChfcGFyc2VkVVJMLnByb3RvY29sID09PSAnaHR0cDonKSB7XG4gICAgICAgIHJldHVybiBodHRwQWdlbnQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gaHR0cHNBZ2VudDtcbiAgICB9XG59XG5mdW5jdGlvbiBkZWZhdWx0XzEocmVzb3VyY2UsIGluaXQpIHtcbiAgICByZXR1cm4gKDAsIG5vZGVfZmV0Y2hfMS5kZWZhdWx0KShyZXNvdXJjZSwgT2JqZWN0LmFzc2lnbih7IGFnZW50OiBhZ2VudChuZXcgVVJMKHJlc291cmNlLnRvU3RyaW5nKCkpKSB9LCBpbml0KSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/fetch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/fetch_json.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/fetch_json.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetchJson = void 0;\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/.pnpm/@near-js+types@0.0.4/node_modules/@near-js/types/lib/index.js\");\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@0.1.0/node_modules/@near-js/utils/lib/index.js\");\nconst http_errors_1 = __importDefault(__webpack_require__(/*! http-errors */ \"(ssr)/./node_modules/.pnpm/http-errors@1.7.2/node_modules/http-errors/index.js\"));\nconst exponential_backoff_1 = __webpack_require__(/*! ./exponential-backoff */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/exponential-backoff.js\");\nconst START_WAIT_TIME_MS = 1000;\nconst BACKOFF_MULTIPLIER = 1.5;\nconst RETRY_NUMBER = 10;\n/**\n * Performs an HTTP request to a specified URL or connection and returns the parsed JSON response.\n * @param connectionInfoOrUrl The connection information or URL for the HTTP request.\n * @param json The JSON payload to be included in the request body for POST requests.\n * @returns A Promise that resolves to the parsed JSON response from the HTTP request.\n */\nfunction fetchJson(connectionInfoOrUrl, json) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let connectionInfo = { url: null };\n        if (typeof (connectionInfoOrUrl) === 'string') {\n            connectionInfo.url = connectionInfoOrUrl;\n        }\n        else {\n            connectionInfo = connectionInfoOrUrl;\n        }\n        const response = yield (0, exponential_backoff_1.exponentialBackoff)(START_WAIT_TIME_MS, RETRY_NUMBER, BACKOFF_MULTIPLIER, () => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            try {\n                const response = yield ((_a = global.fetch) !== null && _a !== void 0 ? _a : (yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ./fetch */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/fetch.js\")))).default)(connectionInfo.url, {\n                    method: json ? 'POST' : 'GET',\n                    body: json ? json : undefined,\n                    headers: Object.assign(Object.assign({}, connectionInfo.headers), { 'Content-Type': 'application/json' })\n                });\n                if (!response.ok) {\n                    if (response.status === 503) {\n                        utils_1.Logger.warn(`Retrying HTTP request for ${connectionInfo.url} as it's not available now`);\n                        return null;\n                    }\n                    else if (response.status === 408) {\n                        utils_1.Logger.warn(`Retrying HTTP request for ${connectionInfo.url} as the previous connection was unused for some time`);\n                        return null;\n                    }\n                    throw (0, http_errors_1.default)(response.status, yield response.text());\n                }\n                return response;\n            }\n            catch (error) {\n                if (error.toString().includes('FetchError') || error.toString().includes('Failed to fetch')) {\n                    utils_1.Logger.warn(`Retrying HTTP request for ${connectionInfo.url} because of error: ${error}`);\n                    return null;\n                }\n                throw error;\n            }\n        }));\n        if (!response) {\n            throw new types_1.TypedError(`Exceeded ${RETRY_NUMBER} attempts for ${connectionInfo.url}.`, 'RetriesExceeded');\n        }\n        return yield response.json();\n    });\n}\nexports.fetchJson = fetchJson;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/fetch_json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetchJson = exports.Provider = exports.JsonRpcProvider = exports.exponentialBackoff = void 0;\nvar exponential_backoff_1 = __webpack_require__(/*! ./exponential-backoff */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/exponential-backoff.js\");\nObject.defineProperty(exports, \"exponentialBackoff\", ({ enumerable: true, get: function () { return exponential_backoff_1.exponentialBackoff; } }));\nvar json_rpc_provider_1 = __webpack_require__(/*! ./json-rpc-provider */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/json-rpc-provider.js\");\nObject.defineProperty(exports, \"JsonRpcProvider\", ({ enumerable: true, get: function () { return json_rpc_provider_1.JsonRpcProvider; } }));\nvar provider_1 = __webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/provider.js\");\nObject.defineProperty(exports, \"Provider\", ({ enumerable: true, get: function () { return provider_1.Provider; } }));\nvar fetch_json_1 = __webpack_require__(/*! ./fetch_json */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/fetch_json.js\");\nObject.defineProperty(exports, \"fetchJson\", ({ enumerable: true, get: function () { return fetch_json_1.fetchJson; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDAuMS4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixHQUFHLGdCQUFnQixHQUFHLHVCQUF1QixHQUFHLDBCQUEwQjtBQUMzRiw0QkFBNEIsbUJBQU8sQ0FBQyw2SUFBdUI7QUFDM0Qsc0RBQXFELEVBQUUscUNBQXFDLG9EQUFvRCxFQUFDO0FBQ2pKLDBCQUEwQixtQkFBTyxDQUFDLHlJQUFxQjtBQUN2RCxtREFBa0QsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUM7QUFDekksaUJBQWlCLG1CQUFPLENBQUMsdUhBQVk7QUFDckMsNENBQTJDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ2xILG1CQUFtQixtQkFBTyxDQUFDLDJIQUFjO0FBQ3pDLDZDQUE0QyxFQUFFLHFDQUFxQyxrQ0FBa0MsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDAuMS4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2luZGV4LmpzPzRmMmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZldGNoSnNvbiA9IGV4cG9ydHMuUHJvdmlkZXIgPSBleHBvcnRzLkpzb25ScGNQcm92aWRlciA9IGV4cG9ydHMuZXhwb25lbnRpYWxCYWNrb2ZmID0gdm9pZCAwO1xudmFyIGV4cG9uZW50aWFsX2JhY2tvZmZfMSA9IHJlcXVpcmUoXCIuL2V4cG9uZW50aWFsLWJhY2tvZmZcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJleHBvbmVudGlhbEJhY2tvZmZcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4cG9uZW50aWFsX2JhY2tvZmZfMS5leHBvbmVudGlhbEJhY2tvZmY7IH0gfSk7XG52YXIganNvbl9ycGNfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2pzb24tcnBjLXByb3ZpZGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSnNvblJwY1Byb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBqc29uX3JwY19wcm92aWRlcl8xLkpzb25ScGNQcm92aWRlcjsgfSB9KTtcbnZhciBwcm92aWRlcl8xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQcm92aWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdmlkZXJfMS5Qcm92aWRlcjsgfSB9KTtcbnZhciBmZXRjaF9qc29uXzEgPSByZXF1aXJlKFwiLi9mZXRjaF9qc29uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZmV0Y2hKc29uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaF9qc29uXzEuZmV0Y2hKc29uOyB9IH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/json-rpc-provider.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/json-rpc-provider.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JsonRpcProvider = void 0;\n/**\n * @module\n * @description\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the [NEAR RPC API](https://docs.near.org/api/rpc/introduction).\n * @see {@link \"@near-js/types\".provider | provider} for a list of request and response types\n */\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@0.1.0/node_modules/@near-js/utils/lib/index.js\");\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/.pnpm/@near-js+types@0.0.4/node_modules/@near-js/types/lib/index.js\");\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/.pnpm/@near-js+transactions@1.1.2/node_modules/@near-js/transactions/lib/index.js\");\nconst exponential_backoff_1 = __webpack_require__(/*! ./exponential-backoff */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/exponential-backoff.js\");\nconst provider_1 = __webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/provider.js\");\nconst fetch_json_1 = __webpack_require__(/*! ./fetch_json */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/fetch_json.js\");\n/** @hidden */\n// Default number of retries before giving up on a request.\nconst REQUEST_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst REQUEST_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst REQUEST_RETRY_WAIT_BACKOFF = 1.5;\n/// Keep ids unique across all connections.\nlet _nextId = 123;\n/**\n * Client class to interact with the [NEAR RPC API](https://docs.near.org/api/rpc/introduction).\n * @see [https://github.com/near/nearcore/tree/master/chain/jsonrpc](https://github.com/near/nearcore/tree/master/chain/jsonrpc)\n */\nclass JsonRpcProvider extends provider_1.Provider {\n    /**\n     * @param connectionInfo Connection info\n     */\n    constructor(connectionInfo) {\n        super();\n        this.connection = connectionInfo || { url: '' };\n    }\n    /**\n     * Gets the RPC's status\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#general-validator-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     */\n    status() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.sendJsonRpc('status', []);\n        });\n    }\n    /**\n     * Sends a signed transaction to the RPC and waits until transaction is fully complete\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     *\n     * @param signedTransaction The signed transaction being sent\n     */\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const bytes = (0, transactions_1.encodeTransaction)(signedTransaction);\n            return this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]);\n        });\n    }\n    /**\n     * Sends a signed transaction to the RPC and immediately returns transaction hash\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n     * @param signedTransaction The signed transaction being sent\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    sendTransactionAsync(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const bytes = (0, transactions_1.encodeTransaction)(signedTransaction);\n            return this.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]);\n        });\n    }\n    /**\n     * Gets a transaction's status from the RPC\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#transaction-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     *\n     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n     * @param accountId The NEAR account that signed the transaction\n     */\n    txStatus(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof txHash === 'string') {\n                return this.txStatusString(txHash, accountId);\n            }\n            else {\n                return this.txStatusUint8Array(txHash, accountId);\n            }\n        });\n    }\n    txStatusUint8Array(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.sendJsonRpc('tx', [(0, utils_1.baseEncode)(txHash), accountId]);\n        });\n    }\n    txStatusString(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.sendJsonRpc('tx', [txHash, accountId]);\n        });\n    }\n    /**\n     * Gets a transaction's status from the RPC with receipts\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n     * @param txHash The hash of the transaction\n     * @param accountId The NEAR account that signed the transaction\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    txStatusReceipts(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof txHash === 'string') {\n                return this.sendJsonRpc('EXPERIMENTAL_tx_status', [txHash, accountId]);\n            }\n            else {\n                return this.sendJsonRpc('EXPERIMENTAL_tx_status', [(0, utils_1.baseEncode)(txHash), accountId]);\n            }\n        });\n    }\n    /**\n     * Query the RPC by passing an {@link \"@near-js/types\".provider/request.RpcQueryRequest | RpcQueryRequest }\n     * @see [https://docs.near.org/api/rpc/contracts](https://docs.near.org/api/rpc/contracts)\n     *\n     * @typeParam T the shape of the returned query response\n     */\n    query(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let result;\n            if (args.length === 1) {\n                const _a = args[0], { block_id, blockId } = _a, otherParams = __rest(_a, [\"block_id\", \"blockId\"]);\n                result = yield this.sendJsonRpc('query', Object.assign(Object.assign({}, otherParams), { block_id: block_id || blockId }));\n            }\n            else {\n                const [path, data] = args;\n                result = yield this.sendJsonRpc('query', [path, data]);\n            }\n            if (result && result.error) {\n                throw new types_1.TypedError(`Querying failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`, (0, utils_1.getErrorTypeFromErrorMessage)(result.error, result.error.name));\n            }\n            return result;\n        });\n    }\n    /**\n     * Query for block info from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     *\n     * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n     */\n    block(blockQuery) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc('block', { block_id: blockId, finality });\n        });\n    }\n    /**\n     * Query changes in block from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     */\n    blockChanges(blockQuery) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc('EXPERIMENTAL_changes_in_block', { block_id: blockId, finality });\n        });\n    }\n    /**\n     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     *\n     * @param chunkId Hash of a chunk ID or shard ID\n     */\n    chunk(chunkId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.sendJsonRpc('chunk', [chunkId]);\n        });\n    }\n    /**\n     * Query validators of the epoch defined by the given block id.\n     * @see [https://docs.near.org/api/rpc/network#validation-status](https://docs.near.org/api/rpc/network#validation-status)\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    validators(blockId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.sendJsonRpc('validators', [blockId]);\n        });\n    }\n    /**\n     * Gets the protocol config at a block from RPC\n     *\n     * @param blockReference specifies the block to get the protocol config for\n     */\n    experimental_protocolConfig(blockReference) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _a = blockReference, { blockId } = _a, otherParams = __rest(_a, [\"blockId\"]);\n            return yield this.sendJsonRpc('EXPERIMENTAL_protocol_config', Object.assign(Object.assign({}, otherParams), { block_id: blockId }));\n        });\n    }\n    /**\n     * Gets a light client execution proof for verifying execution outcomes\n     * @see [https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof](https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof)\n     */\n    lightClientProof(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n        });\n    }\n    /**\n     * Returns the next light client block as far in the future as possible from the last known hash\n     * to still be able to validate from that hash. This will either return the last block of the\n     * next epoch, or the last final known block.\n     *\n     * @see [https://github.com/near/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-block](https://github.com/near/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-block)\n     */\n    nextLightClientBlock(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.sendJsonRpc('next_light_client_block', request);\n        });\n    }\n    /**\n     * Gets access key changes for a given array of accountIds\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n     * @returns {Promise<ChangeResult>}\n     */\n    accessKeyChanges(accountIdArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc('EXPERIMENTAL_changes', {\n                changes_type: 'all_access_key_changes',\n                account_ids: accountIdArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets single access key changes for a given array of access keys\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n     * @returns {Promise<ChangeResult>}\n     */\n    singleAccessKeyChanges(accessKeyArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc('EXPERIMENTAL_changes', {\n                changes_type: 'single_access_key_changes',\n                keys: accessKeyArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets account changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    accountChanges(accountIdArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc('EXPERIMENTAL_changes', {\n                changes_type: 'account_changes',\n                account_ids: accountIdArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets contract state changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: If you pass a keyPrefix it must be base64 encoded\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    contractStateChanges(accountIdArray, blockQuery, keyPrefix = '') {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc('EXPERIMENTAL_changes', {\n                changes_type: 'data_changes',\n                account_ids: accountIdArray,\n                key_prefix_base64: keyPrefix,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets contract code changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: Change is returned in a base64 encoded WASM file\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    contractCodeChanges(accountIdArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc('EXPERIMENTAL_changes', {\n                changes_type: 'contract_code_changes',\n                account_ids: accountIdArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Returns gas price for a specific block_height or block_hash.\n     * @see [https://docs.near.org/api/rpc/gas](https://docs.near.org/api/rpc/gas)\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    gasPrice(blockId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.sendJsonRpc('gas_price', [blockId]);\n        });\n    }\n    /**\n     * Directly call the RPC specifying the method and params\n     *\n     * @param method RPC method\n     * @param params Parameters to the method\n     */\n    sendJsonRpc(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield (0, exponential_backoff_1.exponentialBackoff)(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, () => __awaiter(this, void 0, void 0, function* () {\n                var _a;\n                try {\n                    const request = {\n                        method,\n                        params,\n                        id: (_nextId++),\n                        jsonrpc: '2.0'\n                    };\n                    const response = yield (0, fetch_json_1.fetchJson)(this.connection, JSON.stringify(request));\n                    if (response.error) {\n                        if (typeof response.error.data === 'object') {\n                            if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {\n                                // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                                throw new types_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n                            }\n                            throw (0, utils_1.parseRpcError)(response.error.data);\n                        }\n                        else {\n                            const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;\n                            // NOTE: All this hackery is happening because structured errors not implemented\n                            // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n                            if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error')\n                                || errorMessage.includes('query has timed out')) {\n                                throw new types_1.TypedError(errorMessage, 'TimeoutError');\n                            }\n                            const errorType = (0, utils_1.getErrorTypeFromErrorMessage)(response.error.data, '');\n                            if (errorType) {\n                                throw new types_1.TypedError((0, utils_1.formatError)(errorType, params), errorType);\n                            }\n                            throw new types_1.TypedError(errorMessage, response.error.name);\n                        }\n                    }\n                    else if (typeof ((_a = response.result) === null || _a === void 0 ? void 0 : _a.error) === 'string') {\n                        const errorType = (0, utils_1.getErrorTypeFromErrorMessage)(response.result.error, '');\n                        if (errorType) {\n                            throw new utils_1.ServerError((0, utils_1.formatError)(errorType, params), errorType);\n                        }\n                    }\n                    // Success when response.error is not exist\n                    return response;\n                }\n                catch (error) {\n                    if (error.type === 'TimeoutError') {\n                        utils_1.Logger.warn(`Retrying request to ${method} as it has timed out`, params);\n                        return null;\n                    }\n                    throw error;\n                }\n            }));\n            const { result } = response;\n            // From jsonrpc spec:\n            // result\n            //   This member is REQUIRED on success.\n            //   This member MUST NOT exist if there was an error invoking the method.\n            if (typeof result === 'undefined') {\n                throw new types_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, 'RetriesExceeded');\n            }\n            return result;\n        });\n    }\n}\nexports.JsonRpcProvider = JsonRpcProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/json-rpc-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/provider.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/provider.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * NEAR RPC API request types and responses\n * @module\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Provider = void 0;\n/** @hidden */\nclass Provider {\n}\nexports.Provider = Provider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDAuMS4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL3Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDAuMS4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL3Byb3ZpZGVyLmpzP2Q1ZTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIE5FQVIgUlBDIEFQSSByZXF1ZXN0IHR5cGVzIGFuZCByZXNwb25zZXNcbiAqIEBtb2R1bGVcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qcm92aWRlciA9IHZvaWQgMDtcbi8qKiBAaGlkZGVuICovXG5jbGFzcyBQcm92aWRlciB7XG59XG5leHBvcnRzLlByb3ZpZGVyID0gUHJvdmlkZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@0.1.1/node_modules/@near-js/providers/lib/provider.js\n");

/***/ })

};
;